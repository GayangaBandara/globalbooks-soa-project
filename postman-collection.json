{
  "info": {
    "name": "GlobalBooks OrdersService API Tests",
    "description": "Postman collection for testing OrdersService REST API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/actuator/health",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["actuator", "health"]
        }
      },
      "response": []
    },
    {
      "name": "Create New Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test 1: Verify status code is 201",
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "// Test 2: Verify response has non-empty id field",
              "pm.test(\"Response contains non-empty id\", function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.exist.and.to.not.be.empty;",
              "    // Store id for next request",
              "    pm.collectionVariables.set(\"new_order_id\", response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"customer123\",\n  \"items\": [\n    {\n      \"isbn\": \"978-0134685991\",\n      \"quantity\": 2\n    },\n    {\n      \"isbn\": \"978-1617294945\", \n      \"quantity\": 1\n    }\n  ]\n}"
        },
        "url": {
          "raw": "http://localhost:8081/orders",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get Order by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test 1: Verify status code is 200",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test 2: Verify order id matches stored value",
              "pm.test(\"Order ID matches stored value\", function () {",
              "    const response = pm.response.json();",
              "    const storedId = pm.collectionVariables.get(\"new_order_id\");",
              "    pm.expect(response.id).to.equal(storedId);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/orders/{{orderId}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders", "{{orderId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Get Non-Existent Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Returns 404 for non-existent order\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/orders/NONEXISTENT123",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders", "NONEXISTENT123"]
        }
      },
      "response": []
    },
    {
      "name": "Create Order with Invalid Data",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Returns 400 for invalid data\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"\",\n  \"items\": []\n}"
        },
        "url": {
          "raw": "http://localhost:8081/orders",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders"]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "totalAmount",
      "value": "",
      "type": "string"
    }
  ]
}