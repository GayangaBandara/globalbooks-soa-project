{
  "info": {
    "name": "GlobalBooks OrdersService API Tests",
    "description": "Postman collection for testing OrdersService REST API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/actuator/health",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["actuator", "health"]
        }
      },
      "response": []
    },
    {
      "name": "Create New Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Order created successfully\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.have.jsonBody('orderId');",
              "    pm.response.to.have.jsonBody('totalAmount');",
              "    pm.response.to.have.jsonBody('status', 'CREATED');",
              "});",
              "",
              "// Save the order ID for later tests",
              "var response = pm.response.json();",
              "pm.collectionVariables.set(\"orderId\", response.orderId);",
              "pm.collectionVariables.set(\"totalAmount\", response.totalAmount);"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"customer123\",\n  \"items\": [\n    {\n      \"isbn\": \"978-0134685991\",\n      \"quantity\": 2\n    },\n    {\n      \"isbn\": \"978-1617294945\", \n      \"quantity\": 1\n    }\n  ]\n}"
        },
        "url": {
          "raw": "http://localhost:8081/orders",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get Order by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Order retrieved successfully\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.have.jsonBody('orderId', pm.collectionVariables.get('orderId'));",
              "    pm.response.to.have.jsonBody('totalAmount', pm.collectionVariables.get('totalAmount'));",
              "    pm.response.to.have.jsonBody('userId', 'customer123');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/orders/{{orderId}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders", "{{orderId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Get Non-Existent Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Returns 404 for non-existent order\", function () {",
              "    pm.response.to.have.status(404);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8081/orders/NONEXISTENT123",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders", "NONEXISTENT123"]
        }
      },
      "response": []
    },
    {
      "name": "Create Order with Invalid Data",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Returns 400 for invalid data\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"\",\n  \"items\": []\n}"
        },
        "url": {
          "raw": "http://localhost:8081/orders",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8081",
          "path": ["orders"]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "totalAmount",
      "value": "",
      "type": "string"
    }
  ]
}